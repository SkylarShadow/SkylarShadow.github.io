<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>juce实战(2)：音频波形绘图</title>
    <link href="/2023/11/29/juce-draw-audio-waveforms/"/>
    <url>/2023/11/29/juce-draw-audio-waveforms/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考链接：<a href="https://docs.juce.com/master/tutorial_audio_thumbnail.html">tutorial_audio_thumbnail</a>,官方的教程已经写的很好了，这里仅用来记录学习过程和思考</p><p>做音频应用当然少不了显示音频波形，所以这个tutorial着重学习一下。</p><h2 id="重要对象">1. 重要对象</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">juce::TextButton openButton;<br>juce::TextButton playButton;<br>juce::TextButton stopButton;<br><br>std::unique_ptr&lt;juce::FileChooser&gt; chooser;<br><br>juce::AudioFormatManager formatManager;                    <span class="hljs-comment">// [3] 管理音频格式</span><br>std::unique_ptr&lt;juce::AudioFormatReaderSource&gt; readerSource;<br>juce::AudioTransportSource transportSource;   <span class="hljs-comment">// 音频传输源，允许对音频进行播放、暂停、停止等操作</span><br>TransportState state;<span class="hljs-comment">//控制播放暂停</span><br>juce::AudioThumbnailCache thumbnailCache;                  <span class="hljs-comment">// [1] 用于管理多个AudioThumbnail对象</span><br>juce::AudioThumbnail thumbnail;                            <span class="hljs-comment">// [2] 快速绘制音频波形的缩放视图</span><br></code></pre></td></tr></table></figure><p>重要的类有：AudioThumbnailCache与AudioThumbnail。AudioThumbnailCache:不仅管理了音频波形视图的对象，还在内存中保留了一组低分辨率的预览，避免过频繁地重复扫描音频来生成视图</p><h2 id="初始化">2. 初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">MainContentComponent</span>()<br>   : <span class="hljs-built_in">state</span> (Stopped),<br>     <span class="hljs-built_in">thumbnailCache</span> (<span class="hljs-number">5</span>),                            <span class="hljs-comment">// [4]</span><br>     <span class="hljs-built_in">thumbnail</span> (<span class="hljs-number">512</span>, formatManager, thumbnailCache) <span class="hljs-comment">// [5]</span><br></code></pre></td></tr></table></figure><p>[4]：“5”是要使用的缩略图数量，AudioThumbnailCache对象必须使用要存储的缩略图数量来构造[5]：“512”是构造缩略图的采样点数，能控制缩略图的分辨率</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">formatManager.<span class="hljs-built_in">registerBasicFormats</span>();<br>transportSource.<span class="hljs-built_in">addChangeListener</span> (<span class="hljs-keyword">this</span>);<br>thumbnail.<span class="hljs-built_in">addChangeListener</span> (<span class="hljs-keyword">this</span>);            <span class="hljs-comment">// [6]</span><br></code></pre></td></tr></table></figure><p>在这里给视图对象添加一个监听，当AudioThumbnail发生更新时，可以重绘波形</p><h2 id="响应更改">3.响应更改</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">changeListenerCallback</span> <span class="hljs-params">(juce::ChangeBroadcaster* source)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (source == &amp;transportSource) <span class="hljs-built_in">transportSourceChanged</span>();<br>    <span class="hljs-keyword">if</span> (source == &amp;thumbnail)       <span class="hljs-built_in">thumbnailChanged</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="CBclass.png">注意这里，AudioTransportSource 与AudioThumbnail都是changeListenerCallback的子类，此回调函数根据传入不同的source来执行transportSourceChanged()或thumbnailChanged()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">thumbnailChanged</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">repaint</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transportSourceChanged</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">changeState</span> (transportSource.<span class="hljs-built_in">isPlaying</span>() ? Playing : Stopped);<br>&#125;<br></code></pre></td></tr></table></figure><p>当 AudioThumbnail被改变，调用repaint； 当音频播放的状态被改变，根据音频是否在播放，调用changeState改变状态；</p><h2 id="执行绘图">4.执行绘图</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">paint</span> <span class="hljs-params">(juce::Graphics&amp; g)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">juce::Rectangle&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">thumbnailBounds</span> <span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, getWidth() - <span class="hljs-number">20</span>, getHeight() - <span class="hljs-number">120</span>)</span></span>;<br> <br>    <span class="hljs-keyword">if</span> (thumbnail.<span class="hljs-built_in">getNumChannels</span>() == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">paintIfNoFileLoaded</span> (g, thumbnailBounds);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">paintIfFileLoaded</span> (g, thumbnailBounds);<br>&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">paintIfNoFileLoaded</span> <span class="hljs-params">(juce::Graphics&amp; g, <span class="hljs-type">const</span> juce::Rectangle&lt;<span class="hljs-type">int</span>&gt;&amp; thumbnailBounds)</span></span><br><span class="hljs-function"></span>&#123;<br>    g.<span class="hljs-built_in">setColour</span> (juce::Colours::darkgrey);<br>    g.<span class="hljs-built_in">fillRect</span> (thumbnailBounds);<br>    g.<span class="hljs-built_in">setColour</span> (juce::Colours::white);<br>    g.<span class="hljs-built_in">drawFittedText</span> (<span class="hljs-string">&quot;No File Loaded&quot;</span>, thumbnailBounds, juce::Justification::centred, <span class="hljs-number">1</span>);<br>&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">paintIfFileLoaded</span> <span class="hljs-params">(juce::Graphics&amp; g, <span class="hljs-type">const</span> juce::Rectangle&lt;<span class="hljs-type">int</span>&gt;&amp; thumbnailBounds)</span></span><br><span class="hljs-function"></span>&#123;<br>    g.<span class="hljs-built_in">setColour</span> (juce::Colours::white);<br>    g.<span class="hljs-built_in">fillRect</span> (thumbnailBounds);<br> <br>    g.<span class="hljs-built_in">setColour</span> (juce::Colours::red);                               <span class="hljs-comment">// [8]</span><br> <br>    thumbnail.<span class="hljs-built_in">drawChannels</span> (g,                                      <span class="hljs-comment">// [9]</span><br>                            thumbnailBounds,<br>                            <span class="hljs-number">0.0</span>,                                    <span class="hljs-comment">// start time</span><br>                            thumbnail.<span class="hljs-built_in">getTotalLength</span>(),             <span class="hljs-comment">// end time</span><br>                            <span class="hljs-number">1.0f</span>);                                  <span class="hljs-comment">// vertical zoom</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这段应该挺好懂的，还可以看看drawChannels方法：https://docs.juce.com/master/classAudioThumbnail.html#a8fc354b03e88e66771ef3b9647fdd9fa</p><h2 id="分离组件">5.分离组件</h2><p>如果想要增加功能（例如给音频图添加一个游标，下文会提到做法），最好要将主控件和子控件分开，方便管理；如果用qt、java等写过图形化界面的话，应该很清楚：要将各个模块还有功能尽量分开，增强代码的易读性，减少程序的冗余性和耦合性（好像讲的有点太过术语化了hhh）；</p><p>（这里和官方教程不同，官方教程先添加了游标，建议以官方教程为主，如果要接着往下走，建议根据官方代码的AudioThumbnailTutorial_01.h进行修改，仅仅提供一种思路！）</p><p>因为还没有做新功能，则先将主组件与音频绘图组件分开，即仿照MainContentComponent新建一个SimpleThumbnailComponent类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleThumbnailComponent</span> : <span class="hljs-keyword">public</span> juce::Component,<br>    <span class="hljs-keyword">private</span> juce::ChangeListener<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SimpleThumbnailComponent</span>(<span class="hljs-type">int</span> sourceSamplesPerThumbnailSample,<br>        juce::AudioFormatManager&amp; formatManager,<br>        juce::AudioThumbnailCache&amp; cache)<br>        : <span class="hljs-built_in">thumbnail</span>(sourceSamplesPerThumbnailSample, formatManager, cache)<br>    &#123;<br>        thumbnail.<span class="hljs-built_in">addChangeListener</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br>    juce::AudioThumbnail thumbnail;<br><br>    <span class="hljs-built_in">JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</span>(SimpleThumbnailComponent)<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>接着把关于Thumbnail与paint相关的函数与变量从MainContentComponent搬到SimpleThumbnailComponent。</p><div class="spoiler collapsed">    <div class="spoiler-title">        拆分组件    </div>    <div class="spoiler-content">        <p>有些函数要拆开，如： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">changeListenerCallback</span> <span class="hljs-params">(juce::ChangeBroadcaster* source)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (source == &amp;transportSource) <span class="hljs-built_in">transportSourceChanged</span>();<br>    <span class="hljs-keyword">if</span> (source == &amp;thumbnail)       <span class="hljs-built_in">thumbnailChanged</span>();<br>&#125;<br></code></pre></td></tr></table></figure> 拆成两个函数分别放到两个类中：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//SimpleThumbnailComponent</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">changeListenerCallback</span> <span class="hljs-params">(juce::ChangeBroadcaster* source)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (source == &amp;thumbnail)<br>        <span class="hljs-built_in">thumbnailChanged</span>();<br>&#125;<br><span class="hljs-comment">//MainContentComponent</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">changeListenerCallback</span> <span class="hljs-params">(juce::ChangeBroadcaster* source)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (source == &amp;transportSource)<br>        <span class="hljs-built_in">transportSourceChanged</span>();<br>&#125;<br></code></pre></td></tr></table></figure></p><p>初步分离的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleThumbnailComponent</span> : <span class="hljs-keyword">public</span> juce::Component,<br>    <span class="hljs-keyword">private</span> juce::ChangeListener<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SimpleThumbnailComponent</span>(<span class="hljs-type">int</span> sourceSamplesPerThumbnailSample,<br>        juce::AudioFormatManager&amp; formatManager,<br>        juce::AudioThumbnailCache&amp; cache)<br>        : <span class="hljs-built_in">thumbnail</span>(sourceSamplesPerThumbnailSample, formatManager, cache)<br>    &#123;<br>        thumbnail.<span class="hljs-built_in">addChangeListener</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">paint</span><span class="hljs-params">(juce::Graphics&amp; g)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">juce::Rectangle&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">thumbnailBounds</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, getWidth() - <span class="hljs-number">20</span>, getHeight() - <span class="hljs-number">120</span>)</span></span>;<br><br>        <span class="hljs-keyword">if</span> (thumbnail.<span class="hljs-built_in">getNumChannels</span>() == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">paintIfNoFileLoaded</span>(g, thumbnailBounds);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">paintIfFileLoaded</span>(g, thumbnailBounds);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">thumbnailChanged</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">repaint</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">paintIfNoFileLoaded</span><span class="hljs-params">(juce::Graphics&amp; g, <span class="hljs-type">const</span> juce::Rectangle&lt;<span class="hljs-type">int</span>&gt;&amp; thumbnailBounds)</span></span><br><span class="hljs-function">    </span>&#123;<br>        g.<span class="hljs-built_in">setColour</span>(juce::Colours::darkgrey);<br>        g.<span class="hljs-built_in">fillRect</span>(thumbnailBounds);<br>        g.<span class="hljs-built_in">setColour</span>(juce::Colours::white);<br>        g.<span class="hljs-built_in">drawFittedText</span>(<span class="hljs-string">&quot;No File Loaded&quot;</span>, thumbnailBounds, juce::Justification::centred, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">paintIfFileLoaded</span><span class="hljs-params">(juce::Graphics&amp; g, <span class="hljs-type">const</span> juce::Rectangle&lt;<span class="hljs-type">int</span>&gt;&amp; thumbnailBounds)</span></span><br><span class="hljs-function">    </span>&#123;<br>        g.<span class="hljs-built_in">setColour</span>(juce::Colours::white);<br>        g.<span class="hljs-built_in">fillRect</span>(thumbnailBounds);<br><br>        g.<span class="hljs-built_in">setColour</span>(juce::Colours::red);<br><br>        <span class="hljs-keyword">auto</span> audioLength = (<span class="hljs-type">float</span>)thumbnail.<span class="hljs-built_in">getTotalLength</span>();                               <span class="hljs-comment">// [12]</span><br>        thumbnail.<span class="hljs-built_in">drawChannels</span>(g, thumbnailBounds, <span class="hljs-number">0.0</span>, audioLength, <span class="hljs-number">1.0f</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">changeListenerCallback</span><span class="hljs-params">(juce::ChangeBroadcaster* source)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (source == &amp;thumbnail)       <span class="hljs-built_in">thumbnailChanged</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setFile</span><span class="hljs-params">(<span class="hljs-type">const</span> juce::File&amp; file)</span></span><br><span class="hljs-function">    </span>&#123;<br>        thumbnail.<span class="hljs-built_in">setSource</span>(<span class="hljs-keyword">new</span> juce::<span class="hljs-built_in">FileInputSource</span>(file));<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br><br><br>    juce::AudioThumbnail thumbnail;<br><br>    <span class="hljs-built_in">JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</span>(SimpleThumbnailComponent)<br><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainContentComponent</span> : <span class="hljs-keyword">public</span> juce::AudioAppComponent,<br>                             <span class="hljs-keyword">public</span> juce::ChangeListener,<br>                             <span class="hljs-keyword">private</span> juce::Timer               <span class="hljs-comment">// [10]</span><br>&#123;                              <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MainContentComponent</span>()<br>       : <span class="hljs-built_in">state</span> (Stopped),<br>         <span class="hljs-built_in">thumbnailCache</span> (<span class="hljs-number">5</span>),                            <span class="hljs-comment">// [4] 指定 一次在内存保存</span><br>         <span class="hljs-built_in">thumbnailComp</span> (<span class="hljs-number">512</span>, formatManager, thumbnailCache) <span class="hljs-comment">// [5]</span><br>    &#123;<br>        <span class="hljs-built_in">addAndMakeVisible</span> (&amp;openButton);<br>        openButton.<span class="hljs-built_in">setButtonText</span> (<span class="hljs-string">&quot;Open...&quot;</span>);<br>        openButton.onClick = [<span class="hljs-keyword">this</span>] &#123; <span class="hljs-built_in">openButtonClicked</span>(); &#125;;<br><br>        <span class="hljs-built_in">addAndMakeVisible</span> (&amp;playButton);<br>        playButton.<span class="hljs-built_in">setButtonText</span> (<span class="hljs-string">&quot;Play&quot;</span>);<br>        playButton.onClick = [<span class="hljs-keyword">this</span>] &#123; <span class="hljs-built_in">playButtonClicked</span>(); &#125;;<br>        playButton.<span class="hljs-built_in">setColour</span> (juce::TextButton::buttonColourId, juce::Colours::green);<br>        playButton.<span class="hljs-built_in">setEnabled</span> (<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-built_in">addAndMakeVisible</span> (&amp;stopButton);<br>        stopButton.<span class="hljs-built_in">setButtonText</span> (<span class="hljs-string">&quot;Stop&quot;</span>);<br>        stopButton.onClick = [<span class="hljs-keyword">this</span>] &#123; <span class="hljs-built_in">stopButtonClicked</span>(); &#125;;<br>        stopButton.<span class="hljs-built_in">setColour</span> (juce::TextButton::buttonColourId, juce::Colours::red);<br>        stopButton.<span class="hljs-built_in">setEnabled</span> (<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-built_in">addAndMakeVisible</span>(&amp;thumbnailComp);<br><br>        <span class="hljs-built_in">setSize</span> (<span class="hljs-number">600</span>, <span class="hljs-number">400</span>);<br><br>        formatManager.<span class="hljs-built_in">registerBasicFormats</span>();<br>        transportSource.<span class="hljs-built_in">addChangeListener</span> (<span class="hljs-keyword">this</span>);<br>        <span class="hljs-built_in">setAudioChannels</span> (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br><br>    &#125;<br><br>    ~<span class="hljs-built_in">MainContentComponent</span>() <span class="hljs-keyword">override</span><br>    &#123;<br>        <span class="hljs-built_in">shutdownAudio</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">prepareToPlay</span> <span class="hljs-params">(<span class="hljs-type">int</span> samplesPerBlockExpected, <span class="hljs-type">double</span> sampleRate)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        transportSource.<span class="hljs-built_in">prepareToPlay</span> (samplesPerBlockExpected, sampleRate);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getNextAudioBlock</span> <span class="hljs-params">(<span class="hljs-type">const</span> juce::AudioSourceChannelInfo&amp; bufferToFill)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (readerSource.<span class="hljs-built_in">get</span>() == <span class="hljs-literal">nullptr</span>)<br>            bufferToFill.<span class="hljs-built_in">clearActiveBufferRegion</span>();<br>        <span class="hljs-keyword">else</span><br>            transportSource.<span class="hljs-built_in">getNextAudioBlock</span> (bufferToFill);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">releaseResources</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        transportSource.<span class="hljs-built_in">releaseResources</span>();<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">resized</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        openButton.<span class="hljs-built_in">setBounds</span> (<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-built_in">getWidth</span>() - <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br>        playButton.<span class="hljs-built_in">setBounds</span> (<span class="hljs-number">10</span>, <span class="hljs-number">40</span>, <span class="hljs-built_in">getWidth</span>() - <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br>        stopButton.<span class="hljs-built_in">setBounds</span> (<span class="hljs-number">10</span>, <span class="hljs-number">70</span>, <span class="hljs-built_in">getWidth</span>() - <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-function">juce::Rectangle&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">thumbnailBounds</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, getWidth() - <span class="hljs-number">20</span>, getHeight() - <span class="hljs-number">120</span>)</span></span>;<br>        thumbnailComp.<span class="hljs-built_in">setBounds</span>(thumbnailBounds);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">changeListenerCallback</span> <span class="hljs-params">(juce::ChangeBroadcaster* source)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (source == &amp;transportSource) <span class="hljs-built_in">transportSourceChanged</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">timerCallback</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">    </span>&#123;<br>        ;<br>    &#125;<br><br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">TransportState</span><br>    &#123;<br>        Stopped,<br>        Starting,<br>        Playing,<br>        Stopping<br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">changeState</span> <span class="hljs-params">(TransportState newState)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (state != newState)<br>        &#123;<br>            state = newState;<br><br>            <span class="hljs-keyword">switch</span> (state)<br>            &#123;<br>                <span class="hljs-keyword">case</span> Stopped:<br>                    stopButton.<span class="hljs-built_in">setEnabled</span> (<span class="hljs-literal">false</span>);<br>                    playButton.<span class="hljs-built_in">setEnabled</span> (<span class="hljs-literal">true</span>);<br>                    transportSource.<span class="hljs-built_in">setPosition</span> (<span class="hljs-number">0.0</span>);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> Starting:<br>                    playButton.<span class="hljs-built_in">setEnabled</span> (<span class="hljs-literal">false</span>);<br>                    transportSource.<span class="hljs-built_in">start</span>();<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> Playing:<br>                    stopButton.<span class="hljs-built_in">setEnabled</span> (<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">case</span> Stopping:<br>                    transportSource.<span class="hljs-built_in">stop</span>();<br>                    <span class="hljs-keyword">break</span>;<br><br>                <span class="hljs-keyword">default</span>:<br>                    jassertfalse;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">transportSourceChanged</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">changeState</span> (transportSource.<span class="hljs-built_in">isPlaying</span>() ? Playing : Stopped);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">openButtonClicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        chooser = std::<span class="hljs-built_in">make_unique</span>&lt;juce::FileChooser&gt; (<span class="hljs-string">&quot;Select a Wave file to play...&quot;</span>,<br>                                                       juce::File&#123;&#125;,<br>                                                       <span class="hljs-string">&quot;*.wav&quot;</span>);<br>        <span class="hljs-keyword">auto</span> chooserFlags = juce::FileBrowserComponent::openMode<br>                          | juce::FileBrowserComponent::canSelectFiles;<br><br>        chooser-&gt;<span class="hljs-built_in">launchAsync</span> (chooserFlags, [<span class="hljs-keyword">this</span>] (<span class="hljs-type">const</span> juce::FileChooser&amp; fc)<br>        &#123;<br>            <span class="hljs-keyword">auto</span> file = fc.<span class="hljs-built_in">getResult</span>();<br><br>            <span class="hljs-keyword">if</span> (file != juce::File&#123;&#125;)<br>            &#123;<br>                <span class="hljs-keyword">auto</span>* reader = formatManager.<span class="hljs-built_in">createReaderFor</span> (file);<br><br>                <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">nullptr</span>)<br>                &#123;<br>                    <span class="hljs-keyword">auto</span> newSource = std::<span class="hljs-built_in">make_unique</span>&lt;juce::AudioFormatReaderSource&gt; (reader, <span class="hljs-literal">true</span>);<br>                    transportSource.<span class="hljs-built_in">setSource</span> (newSource.<span class="hljs-built_in">get</span>(), <span class="hljs-number">0</span>, <span class="hljs-literal">nullptr</span>, reader-&gt;sampleRate);<br>                    playButton.<span class="hljs-built_in">setEnabled</span> (<span class="hljs-literal">true</span>);<br>                    thumbnailComp.<span class="hljs-built_in">setFile</span>(file);                           <span class="hljs-comment">// [7]</span><br>                    readerSource.<span class="hljs-built_in">reset</span> (newSource.<span class="hljs-built_in">release</span>());<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">playButtonClicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">changeState</span> (Starting);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stopButtonClicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">changeState</span> (Stopping);<br>    &#125;<br><br>    juce::TextButton openButton;<br>    juce::TextButton playButton;<br>    juce::TextButton stopButton;<br><br>    std::unique_ptr&lt;juce::FileChooser&gt; chooser;<br><br>    juce::AudioFormatManager formatManager;                    <span class="hljs-comment">// [3] 管理音频格式</span><br>    std::unique_ptr&lt;juce::AudioFormatReaderSource&gt; readerSource;<br>    juce::AudioTransportSource transportSource;<br>    TransportState state;<br>    juce::AudioThumbnailCache thumbnailCache;                  <span class="hljs-comment">// [1] 用于管理多个AudioThumbnail对象</span><br>    <span class="hljs-comment">//juce::AudioThumbnail thumbnail;                            // [2] 快速绘制音频波形的缩放视图</span><br>    SimpleThumbnailComponent thumbnailComp;   <span class="hljs-comment">// 别忘了在主组件中声明子组件</span><br>    <span class="hljs-built_in">JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</span> (MainContentComponent)<br>&#125;;<br><br></code></pre></td></tr></table></figure>    </div></div><p>运行一下：<img src="exp2.png">为什么音频波形图位置和之前的不同？因为没有分离好，例如：子组件的paint函数中有juce::Rectangle<int> thumbnailBounds(10, 100, getWidth() - 20,getHeight() -120);官方代码中，主控件中的resize函数中调用thumbnailBounds，设置了波形图的位置，而初步分离的代码直接将thumbnailBounds复制到resize函数中，没有对子控件的其他函数进行修改，可以对比一下官方代码和初步分离的代码，也可以调整一下thumbnailBounds的值，观察波形图在界面的移动。</int></p><p>总之...这里只是提供分离控件的思想，故省略这部分的详细思考过程（懒。</p><h2 id="添加时间标">添加时间标</h2><p>有了波形，当然也要有edison同款时间标 <img src="edison.png"></p><p>转到AudioThumbnailTutorial_04.h，绘制时间标记的代码在SimplePositionOverlay类中。首先先做一个定时器，按照指定的时间间隔重绘这一条时间标记线，故SimplePositionOverlay要继承juce的Timer类<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimplePositionOverlay</span> : <span class="hljs-keyword">public</span> juce::Component,<br>                              <span class="hljs-keyword">private</span> juce::Timer<br></code></pre></td></tr></table></figure></p><p>设置定时器的时间间隔为40ms， <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SimplePositionOverlay</span> (<span class="hljs-type">const</span> juce::AudioTransportSource&amp; transportSourceToUse)<br>       : <span class="hljs-built_in">transportSource</span> (transportSourceToUse)<br>    &#123;<br>        <span class="hljs-built_in">startTimer</span> (<span class="hljs-number">40</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">paint</span> <span class="hljs-params">(juce::Graphics&amp; g)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> duration = (<span class="hljs-type">float</span>) transportSource.<span class="hljs-built_in">getLengthInSeconds</span>();<br><br>    <span class="hljs-keyword">if</span> (duration &gt; <span class="hljs-number">0.0</span>)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> audioPosition = (<span class="hljs-type">float</span>) transportSource.<span class="hljs-built_in">getCurrentPosition</span>();<br>        <span class="hljs-keyword">auto</span> drawPosition = (audioPosition / duration) * (<span class="hljs-type">float</span>) <span class="hljs-built_in">getWidth</span>();<br><br>        g.<span class="hljs-built_in">setColour</span> (juce::Colours::green);<br>        g.<span class="hljs-built_in">drawLine</span> (drawPosition, <span class="hljs-number">0.0f</span>, drawPosition, (<span class="hljs-type">float</span>) <span class="hljs-built_in">getHeight</span>(), <span class="hljs-number">2.0f</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>paint函数中，audioPosition变量获取音频播放的时间位置（即音频播放到多少分多少秒）；drawPosition找到绘制的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mouseDown</span><span class="hljs-params">(<span class="hljs-type">const</span> juce::MouseEvent&amp; event)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> duration = transportSource.<span class="hljs-built_in">getLengthInSeconds</span>();<br><br>    <span class="hljs-keyword">if</span> (duration &gt; <span class="hljs-number">0.0</span>)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> clickPosition = event.position.x;<br>        <span class="hljs-keyword">auto</span> audioPosition = (clickPosition / (<span class="hljs-type">float</span>)<span class="hljs-built_in">getWidth</span>()) * duration;<br><br>        transportSource.<span class="hljs-built_in">setPosition</span>(audioPosition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>mouseDown函数中，获取鼠标x轴位置的值，并用这个值通过setPosition设置音频播放的当前时间。</p><p>效果： <img src="show.gif"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>audio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>juce</tag>
      
      <tag>audio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>juce实战(1)：制作一个白噪声合成器</title>
    <link href="/2023/11/14/juce-1-white-noice-generator/"/>
    <url>/2023/11/14/juce-1-white-noice-generator/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>好的我回来了。 参考链接：<a href="https://docs.juce.com/master/tutorial_simple_synth_noise.html">tutorial_simple_synth_noise</a>,官方的教程已经写的很好了，我只是为了记录一下</p><p>首先按照官方教程创建一个音频应用，选择projucerapplication下的audio，创建项目模板</p><p>打开项目，先看到MainComponent.h，发现我们的类继承于juce::AudioAppComponent。</p><p>了解一下juce音频应用的生命周期(licecycle): <img src="lifecycle.png" alt="生命周期"></p><ol type="1"><li><p>prepareToPlay():在音频处理前调用；</p></li><li><p>releaseResources():在音频处理完成时调用；</p></li><li><p>getNextAudioBlock():当音频硬件需要新的音频数据（块）的时候调用；这个函数是最重要的</p></li><li><p>setAudioChannels():设定输入与输出声道，在构造函数进行设置，这个函数的触发意味着音频处理的开始；</p></li><li><p>shutdownAudio():这个就不需解释啦。</p></li><li><p>第一步：设置声道数量： 先转到MainComponent.cpp <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp">MainComponent::<span class="hljs-built_in">MainComponent</span>()<br>&#123;<br>    <span class="hljs-comment">// Make sure you set the size of the component after</span><br>    <span class="hljs-comment">// you add any child components.</span><br>    <span class="hljs-built_in">setSize</span> (<span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br><br>    <span class="hljs-comment">// Some platforms require permissions to open input channels so request that here</span><br>    <span class="hljs-keyword">if</span> (juce::RuntimePermissions::<span class="hljs-built_in">isRequired</span> (juce::RuntimePermissions::recordAudio)<br>        &amp;&amp; ! juce::RuntimePermissions::<span class="hljs-built_in">isGranted</span> (juce::RuntimePermissions::recordAudio))<br>    &#123;<br>        juce::RuntimePermissions::<span class="hljs-built_in">request</span> (juce::RuntimePermissions::recordAudio,<br>                                           [&amp;] (<span class="hljs-type">bool</span> granted) &#123; <span class="hljs-built_in">setAudioChannels</span> (granted ? <span class="hljs-number">2</span> : <span class="hljs-number">0</span>, <span class="hljs-number">2</span>); &#125;);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// Specify the number of input and output channels that we want to open</span><br>        <span class="hljs-built_in">setAudioChannels</span> (<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);  <span class="hljs-comment">// no inputs, 2 outputs</span><br>    &#125;<br>&#125;<br>```  <br>因为只是生成器，所以不需要有输入，且设定为两个输出（左右声道）。<br><br><span class="hljs-number">1.</span> <span class="hljs-built_in">prepareToPlay</span>()不需要做什么，可以先不管（喜欢的话随便输出点什么吧）<br><br><span class="hljs-number">2.</span> 最关键的一步:生成白噪音：<br>```<span class="hljs-function">cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainComponent::getNextAudioBlock</span> <span class="hljs-params">(<span class="hljs-type">const</span> juce::AudioSourceChannelInfo&amp; bufferToFill)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// Your audio-processing code goes here!</span><br><br>    <span class="hljs-comment">// For more details, see the help for AudioProcessor::getNextAudioBlock()</span><br><br>    <span class="hljs-comment">// Right now we are not producing any data, in which case we need to clear the buffer</span><br>    <span class="hljs-comment">// (to prevent the output of random noise)</span><br>    <span class="hljs-comment">//bufferToFill.clearActiveBufferRegion();</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> channel = <span class="hljs-number">0</span>; channel &lt; bufferToFill.buffer-&gt;<span class="hljs-built_in">getNumChannels</span>(); ++channel)<br>    &#123;<br>        <span class="hljs-comment">// Get a pointer to the start sample in the buffer for this audio output channel</span><br>        <span class="hljs-keyword">auto</span>* buffer = bufferToFill.buffer-&gt;<span class="hljs-built_in">getWritePointer</span>(channel, bufferToFill.startSample);<br><br>        <span class="hljs-comment">// Fill the required number of samples with noise between -0.125 and +0.125</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> sample = <span class="hljs-number">0</span>; sample &lt; bufferToFill.numSamples; ++sample)<br>            buffer[sample] = random.<span class="hljs-built_in">nextFloat</span>() * <span class="hljs-number">0.25f</span> - <span class="hljs-number">0.125f</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>同时，引入juce的random类：MainComponent.h <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//==============================================================================</span><br>    <span class="hljs-comment">// Your private member variables go here...</span><br>    juce::Random random;<br><br>    <span class="hljs-built_in">JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR</span> (MainComponent)<br><br></code></pre></td></tr></table></figure></p></li></ol><p>代码应该很好懂，将-0.125到0.125的随机数字写入缓冲区，bufferToFill.buffer-&gt;getWritePointer(channel,bufferToFill.startSample);中的<a href="https://docs.juce.com/master/structAudioSourceChannelInfo.html#a42e88ccc05d4893015e2415785390259">bufferToFill.startSample</a>指的是缓冲区预期中写入数据的第一个样本。</p><p>最后再析构函数中加上shutdown <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">~<span class="hljs-built_in">MainContentComponent</span>() <span class="hljs-keyword">override</span><br>&#123;<br>    <span class="hljs-built_in">shutdownAudio</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure>简简单单，现在运行一下，听下声音。（回头装个插件......让博客带声音）</p><p>思考： 1. 让getNextAudioBlock中buffer[sample] =一个常数，听上去会怎么样？（嗡嗡响） 2.调大区间或者调大数值（如[2,4]或更大），听上去有什么改变？（更大声） 3.如何播放正弦波？</p><p>稍微修改一下： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">MainComponent::getNextAudioBlock</span> <span class="hljs-params">(<span class="hljs-type">const</span> juce::AudioSourceChannelInfo&amp; bufferToFill)</span></span><br><span class="hljs-function"></span>&#123;<br><br>        <br>        <span class="hljs-keyword">auto</span> level = <span class="hljs-number">0.125f</span>;<br>        <span class="hljs-keyword">auto</span>* leftBuffer = bufferToFill.buffer-&gt;<span class="hljs-built_in">getWritePointer</span>(<span class="hljs-number">0</span>, bufferToFill.startSample);<br>        <span class="hljs-keyword">auto</span>* rightBuffer = bufferToFill.buffer-&gt;<span class="hljs-built_in">getWritePointer</span>(<span class="hljs-number">1</span>, bufferToFill.startSample);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> sample = <span class="hljs-number">0</span>; sample &lt; bufferToFill.numSamples; ++sample)<br>        &#123;<br>            <span class="hljs-keyword">auto</span> currentSample = (<span class="hljs-type">float</span>)std::<span class="hljs-built_in">sin</span>(currentAngle);<br>            currentAngle += angleDelta;<br>            leftBuffer[sample] = currentSample * level;<br>            rightBuffer[sample] = currentSample * level;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure> 同时在头文件添加： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">double</span>  currentAngle = <span class="hljs-number">0.0</span>, angleDelta = <span class="hljs-number">31.4</span>;<br></code></pre></td></tr></table></figure></p><!--音频嵌入：           <div id="aplayer-mPKAagom" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-mPKAagom"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "No_Time_for_Caution",              author: "Hans_Zimmer",              url: "No_Time_for_Caution-Hans_Zimmer-24026258.mp3",              pic: "https://img4.kuwo.cn/star/albumcover/300/50/69/4184500136.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>--&gt;</p>--><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>audio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>juce</tag>
      
      <tag>audio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用juce内置的调试器调试插件？</title>
    <link href="/2023/10/15/juce-setup-plugin-debug/"/>
    <url>/2023/10/15/juce-setup-plugin-debug/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何用juce内置的调试器调试插件">如何用juce内置的调试器调试插件？</h1><ol type="1"><li><p>找到juce目录下的extras/AudioPluginHost/Projucer.jucer，用Projucer打开，再用ide打开 <img src="juce-setup-plugin-debug1.png"></p></li><li><p>用ide打开后并运行，出现juce自带的插件调试环境 <img src="juce-setup-plugin-debug2.png"></p></li><li><p>若要调试插件，（在windows中）选菜单的Options-&gt;edit the list ofavailable plugins...（或者直接按ctrl+p），按options-&gt;scanvst3,选好vst3存在的路径再扫描就可以了 <img src="juce-setup-plugin-debug3.png"> <img src="juce-setup-plugin-debug4.png"></p></li><li><p>最后在调试器主界面看看效果：对主界面按鼠标右键选择想添加的插件（我这里添加了个real guitar） <img src="juce-setup-plugin-debug5.png"></p></li></ol><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <categories>
      
      <category>program</category>
      
      <category>audio</category>
      
    </categories>
    
    
    <tags>
      
      <tag>juce</tag>
      
      <tag>audio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用数字信号处理——笔记与基于C++与python的实验(6)</title>
    <link href="/2023/08/29/dsp-guide6/"/>
    <url>/2023/08/29/dsp-guide6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考书：《实用数字信号处理：从原理到应用》 Steven W. Smith本笔记的内容倾向于计算机专业的程序设计，便于学习（复习）C++、python等知识；<br>本文是笔记而不是教程，所以仅供参考；</p><h2 id="傅里叶变换的性质">傅里叶变换的性质</h2><ol type="1"><li>齐次性：如果 x[] 和 X[] 是一 个傅里叶变换对，那么对于任意常数 k, kx[] 和 kX[]也是傅里叶变换对</li><li>可加性：直角坐标系中频谱相加,即实部与实部相加，虚部与虚部相加。如果x1[n] +x2[n]=y[n]，那么 ReX1[f] + ReX2[f]=Rey[f]，且 ImX1[f]+lmX2[f]=lmy[f]</li></ol><h2 id="验证可加性和齐次性">验证可加性和齐次性</h2><p>(齐次性略过，有必要的话以后补上)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br>x1 = <span class="hljs-built_in">create_sin_arr</span>(<span class="hljs-number">1</span>,<span class="hljs-number">220</span>, <span class="hljs-number">0</span>,<span class="hljs-number">22050</span>,<span class="hljs-number">1000</span>);<br>x2 = <span class="hljs-built_in">create_sin_arr</span>(<span class="hljs-number">1</span>,<span class="hljs-number">330</span>, <span class="hljs-number">0</span>,<span class="hljs-number">22050</span>,<span class="hljs-number">1000</span>);<br>x3 = x1 + x2;<br><span class="hljs-built_in">vector_show</span>(x3);<br><span class="hljs-built_in">vector_complex_real_show</span>(<span class="hljs-built_in">IDFT</span>(<span class="hljs-built_in">DFT</span>(<span class="hljs-built_in">real_to_complex</span>(x1) + <span class="hljs-built_in">real_to_complex</span>(x2),<span class="hljs-number">4410</span>),<span class="hljs-number">4410</span>));<br><br></code></pre></td></tr></table></figure><p>第一组数据，将x1和x2数据直接相加；第二组数据，将x1和x2分别做dft再相加，然后再做idft(为了方便计算，第二组数据只取了1/5)</p><p>将计算后的结果用python绘图 <!-- ![](/image/properties.png) --></p><p><img src="properties.png"></p><p>发现两组数据形成的曲线重叠在一起，说明数据相同，故得证。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
    <tags>
      
      <tag>dsp</tag>
      
      <tag>数字信号处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用数字信号处理——笔记与基于C++与python的实验(5)</title>
    <link href="/2023/08/28/dsp-guide5/"/>
    <url>/2023/08/28/dsp-guide5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考书：《实用数字信号处理：从原理到应用》 Steven W. Smith本笔记的内容倾向于计算机专业的程序设计，便于学习（复习）C++、python等知识；<br>本文是笔记而不是教程，所以仅供参考；</p><h2 id="dft和dtft">5.1 DFT和DTFT</h2><p><a href="https://vrlab.meijo-u.ac.jp/edu/sinewave-dtft2dft.html" class="uri">https://vrlab.meijo-u.ac.jp/edu/sinewave-dtft2dft.html</a></p><p>DFT:<!-- $ X[k]=\sum{^{N-1} _{n=0}}x[n]e^{-jn2 \pi ft} = \sum{ ^{N-1} _{n=0} }x[n]e^{-jn2 \pi \frac{k}{N}} ( \omega _k = \frac{2 \pi k}{N}) $ --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mo>∑</mo><msubsup><mrow></mrow><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>n</mi><mn>2</mn><mi>π</mi><mi>f</mi><mi>t</mi></mrow></msup><mo>=</mo><mo>∑</mo><msubsup><mrow></mrow><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>n</mi><mn>2</mn><mi>π</mi><mfrac><mi>k</mi><mi>N</mi></mfrac></mrow></msup><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>k</mi></msub><mo>=</mo><mfrac><mrow><mn>2</mn><mi>π</mi><mi>k</mi></mrow><mi>N</mi></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X[k]=\sum{^{N-1} _{n=0} }x[n]e^{-jn2 \pi ft} = \sum{ ^{N-1} _{n=0} }x[n]e^{ -jn2 \pi \frac{k}{N}} ( \omega _k = \frac{2 \pi k}{N})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.14777em;vertical-align:-0.266308em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.881462em;"><span style="top:-2.433692em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.245328em;vertical-align:-0.266308em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.881462em;"><span style="top:-2.433692em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.97902em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8800285714285714em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></p><p>DTFT:<!-- $ X[k]=\sum{^{N-1} _{n=0}}x[n]e^{-jnf}=\sum{ ^{N-1} _{n=0} }x[n]e^{-jn\omega} $ --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mo>∑</mo><msubsup><mrow></mrow><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>n</mi><mi>f</mi></mrow></msup><mo>=</mo><mo>∑</mo><msubsup><mrow></mrow><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>n</mi><mi>ω</mi></mrow></msup></mrow><annotation encoding="application/x-tex">X[k]=\sum{^{N-1} _{n=0} }x[n]e^{-jnf}=\sum{ ^{N-1} _{n=0} }x[n]e^{-jn\omega}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.14777em;vertical-align:-0.266308em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.881462em;"><span style="top:-2.433692em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.14777em;vertical-align:-0.266308em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.881462em;"><span style="top:-2.433692em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span></span></span></span></p><p>区别： 1.DFT作用的对象是有限长离散时间非周期信号，DTFT作用的对象也是有限长离散时间非周期信号（回忆：DFS作用的对象是无限长离散时间周期序列）2.DFT的结果是频域上的离散周期信号，DTFT的结果是频域上的无限长非周期信号</p><p>所以：对一个长度为N的有限长序列进行DTFT运算后，再把得到的频谱进行抽样频率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>k</mi></msub><mo>=</mo><mfrac><mrow><mn>2</mn><mi>π</mi><mi>k</mi></mrow><mi>N</mi></mfrac></mrow><annotation encoding="application/x-tex">\omega _k = \frac{2 \pi k}{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的抽样，结果等于对此序列进行DFT运算的结果；</p><h2 id="卷积和dft">5.2 卷积和DFT</h2><p><img src="dft_conv.png"></p><p>对比卷积和dft的代码： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;complex&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">DFT</span>(vector&lt;complex&lt;<span class="hljs-type">double</span>&gt;&gt; arr,<span class="hljs-type">int</span> N)&#123;<br>    vector&lt;complex&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">ret</span>(N);<br>    complex&lt;<span class="hljs-type">double</span>&gt; temp&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; N;k++)&#123;<br>        ret[k].<span class="hljs-built_in">imag</span>(<span class="hljs-number">0</span>);<br>        ret[k].<span class="hljs-built_in">real</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N;i++)&#123;<br>            temp.<span class="hljs-built_in">real</span>(<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*M_PI*k*i/N));<br>            temp.<span class="hljs-built_in">imag</span>(-<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*M_PI*k*i/N));<br>            ret[k] += arr[i] * temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T1,<span class="hljs-keyword">typename</span> T2&gt;<br><span class="hljs-function">vector&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">convolution_output_side</span><span class="hljs-params">(vector&lt;T1&gt; X,vector&lt;T2&gt; H)</span></span>&#123;<br><span class="hljs-function">vector&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">Y</span><span class="hljs-params">(X.size()+H.size(), <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; Y.<span class="hljs-built_in">size</span>(); i++)&#123; <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; H.<span class="hljs-built_in">size</span>(); j++)&#123; <br>        <span class="hljs-keyword">if</span>(i - j &lt; <span class="hljs-number">0</span>) <br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(i - j &gt;= X.<span class="hljs-built_in">size</span>() ) <br>            <span class="hljs-keyword">continue</span>;<br>        Y[i] += X[i - j] * H[j];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> Y;<br>&#125;<br></code></pre></td></tr></table></figure></p><p>发现dft和卷积进行的计算量一样大；仅仅简单地通过dft将问题换到频域去计算，计算量很大，对解决问题没有实质的帮助，后面FFT的诞生才出现了突破。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
    <tags>
      
      <tag>dsp</tag>
      
      <tag>数字信号处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用数字信号处理——笔记与基于C++与python的实验(4)</title>
    <link href="/2023/08/25/dsp-guide4/"/>
    <url>/2023/08/25/dsp-guide4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考书：《实用数字信号处理：从原理到应用》 Steven W. Smith本笔记的内容倾向于计算机专业，电路相关的内容会较少而程序方面的会比较多，且能够便于学习（复习）C++的知识；<br>本文是笔记而不是教程，所以仅供参考；</p><h2 id="离散傅里叶变换dft">4.1.离散傅里叶变换（DFT）</h2><h3 id="如何从多个角度理解dft">4.2.如何从多个角度理解dft？</h3><p>（以后补充详细内容，这部分先略过） 1.公式推导 2.正交分解 3.矩阵</p><p>离散傅里叶正变换： 复数形式:</p><!-- $X[k]=\sum{ ^{N-1}_{n=0}}x[t] e^{ -jn2\pi ft}$ --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mo>∑</mo><msubsup><mrow></mrow><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>x</mi><mo stretchy="false">[</mo><mi>t</mi><mo stretchy="false">]</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>j</mi><mi>n</mi><mn>2</mn><mi>π</mi><mi>f</mi><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex">X[k]=\sum{ ^{N-1}_{n=0}}x[t] e^{ -jn2\pi ft}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.14777em;vertical-align:-0.266308em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.881462em;"><span style="top:-2.433692em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">[</span><span class="mord mathnormal">t</span><span class="mclose">]</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span><p>根据欧拉公式，改写成：<!-- $X[k]=\sum{^{N-1}_{n=0}}x[n] (\cos{ (\frac{ {2\pi kn} }{N}) } -i\sin{ (\frac{ {2\pi kn} }{N})})$ --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mo>∑</mo><msubsup><mrow></mrow><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mi>cos</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mfrac><mrow><mn>2</mn><mi>π</mi><mi>k</mi><mi>n</mi></mrow><mi>N</mi></mfrac><mo stretchy="false">)</mo></mrow><mo>−</mo><mi>i</mi><mi>sin</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mfrac><mrow><mn>2</mn><mi>π</mi><mi>k</mi><mi>n</mi></mrow><mi>N</mi></mfrac><mo stretchy="false">)</mo></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X[k]=\sum{^{N-1}_{n=0}}x[n] (\cos{ (\frac{ {2\pi kn} }{N}) } -i\sin{ (\frac{ {2\pi kn} }{N})})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.226462em;vertical-align:-0.345em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.881462em;"><span style="top:-2.433692em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mopen">(</span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span><span class="mclose">)</span></span></span></span></p><p>离散傅里叶逆变换：<!-- $X[k]=\frac{1}{N}\sum{^{N-1}_{n=0}}x[n] (\cos{(\frac{ {2\pi kn} }{N})} +i\sin{(\frac{ {2\pi kn} }{N})})$ --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><mo>∑</mo><msubsup><mrow></mrow><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mi>cos</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mfrac><mrow><mn>2</mn><mi>π</mi><mi>k</mi><mi>n</mi></mrow><mi>N</mi></mfrac><mo stretchy="false">)</mo></mrow><mo>+</mo><mi>i</mi><mi>sin</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mfrac><mrow><mn>2</mn><mi>π</mi><mi>k</mi><mi>n</mi></mrow><mi>N</mi></mfrac><mo stretchy="false">)</mo></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> X[k]=\frac{1}{N}\sum{^{N-1}_{n=0}}x[n] (\cos{(\frac{ {2\pi kn} }{N})} +i\sin{(\frac{ {2\pi kn} }{N})})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.226462em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.881462em;"><span style="top:-2.433692em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span><span class="mopen">(</span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight">n</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span><span class="mclose">)</span></span></span></span></p><p>实现代码： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;complex&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">DFT</span>(vector&lt;complex&lt;<span class="hljs-type">double</span>&gt;&gt; arr,<span class="hljs-type">int</span> N)&#123;<br>    vector&lt;complex&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">ret</span>(N);<br>    complex&lt;<span class="hljs-type">double</span>&gt; temp&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; N;k++)&#123;<br>        ret[k].<span class="hljs-built_in">imag</span>(<span class="hljs-number">0</span>);<br>        ret[k].<span class="hljs-built_in">real</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N;i++)&#123;<br>            temp.<span class="hljs-built_in">real</span>(<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*M_PI*k*i/N));<br>            temp.<span class="hljs-built_in">imag</span>(-<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*M_PI*k*i/N));<br>            ret[k] += arr[i] * temp;<br>            <span class="hljs-comment">// ret[k].real(ret[k].real() + arr[i].real() * temp.real()-arr[i].imag()*temp.imag());</span><br>            <span class="hljs-comment">// ret[k].imag(ret[k].imag() + arr[i].real() * temp.imag()+arr[i].imag()*temp.real());</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br>vector&lt;complex&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">IDFT</span>(vector&lt;complex&lt;<span class="hljs-type">double</span>&gt;&gt; arr,<span class="hljs-type">int</span> N)&#123;<br>    vector&lt;complex&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">ret</span>(N);<br>    complex&lt;<span class="hljs-type">double</span>&gt; temp&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; N;k++)&#123;<br>        ret[k].<span class="hljs-built_in">imag</span>(<span class="hljs-number">0</span>);<br>        ret[k].<span class="hljs-built_in">real</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N;i++)&#123;<br>            temp.<span class="hljs-built_in">real</span>(<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*M_PI*k*i/N));<br>            temp.<span class="hljs-built_in">imag</span>(<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*M_PI*k*i/N));<br>            ret[k] += arr[i] * temp;<br>        &#125;<br>        ret[k].<span class="hljs-built_in">real</span>(ret[k].<span class="hljs-built_in">real</span>()/N);<br>        ret[k].<span class="hljs-built_in">imag</span>(ret[k].<span class="hljs-built_in">imag</span>()/N);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><del>(其实我感觉从代码上很容易看到dft的本质:信号对三角函数的正交分解</del></p><p>结果：</p><p><img src="dft1.png"></p><p>idft后的数值和初始数组一致（复数部分有误差）</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
    <tags>
      
      <tag>dsp</tag>
      
      <tag>数字信号处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用数字信号处理——笔记与基于C++与python的实验(3)</title>
    <link href="/2023/08/20/dsp-guide3/"/>
    <url>/2023/08/20/dsp-guide3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考书：《实用数字信号处理：从原理到应用》 Steven W. Smith本笔记的内容倾向于计算机专业，电路相关的内容会较少而程序方面的会比较多，且能够便于学习（复习）C++的知识；<br>本文是笔记而不是教程，所以仅供参考；</p><h2 id="卷积">3.1.卷积</h2><p>卷积的作用：将两个函数（或信号）之间的信息进行合成或变换，特别是用于滤波和傅里叶变换</p><p>公式: $ z(t)=x(t)*y(t)= ∫x(m)y(t-m)dm $</p><p>卷积的本质：加权和.</p><p>卷积的角度：输入端：分析输入信号的一个样点是如何对输出端的多个样点产生贡献的输出端：分析输出信号的一个样点是如何接收到输人信号多个样点的信息</p><p><img src="conv1.png"></p><p>模拟下图： <img src="conv2.png"></p><p>代码:</p><pre><code class="hljs">vector&lt;double&gt; X=&#123;0, -1, -1.3, 2, 1.4, 1.4, 0.6, 0, -0.6&#125;;vector&lt;double&gt; H=&#123;1, -0.5, -0.3, -0.2&#125;;vector&lt;double&gt; Y;Y = convolution_input_side(X, H);vector_show(Y);Y = convolution_output_side(X, H);vector_show(Y);template &lt;typename T1,typename T2&gt;vector&lt;double&gt; convolution_output_side(vector&lt;T1&gt; X,vector&lt;T2&gt; H)&#123;vector&lt;double&gt; Y(X.size()+H.size(), 0);for(int i = 0; i &lt; Y.size(); i++)&#123;     for(int j = 0; j &lt; H.size(); j++)&#123;         if(i - j &lt; 0)             continue;        if(i - j &gt;= X.size() )             continue;        Y[i] += X[i - j] * H[j];    &#125;&#125;return Y;&#125;</code></pre><p>结果： <img src="conv3.png">因为输入数值是肉眼观察的，所以部分数值有出入，但是数值的“位置和趋势”表明了程序是没有问题的;且输出端角度来看也同理。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
    <tags>
      
      <tag>dsp</tag>
      
      <tag>数字信号处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用数字信号处理——笔记与基于C++与python的实验(2)</title>
    <link href="/2023/08/19/dsp-guide2/"/>
    <url>/2023/08/19/dsp-guide2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考书：《实用数字信号处理：从原理到应用》 Steven W. Smith本笔记的内容倾向于de3/计算机专业，电路相关的内容会较少而程序方面的会比较多，且能够便于学习（复习）C++的知识；<br>本文是笔记而不是相对准确的教程，所以仅供参考；</p><h2 id="均值方差模型与直方图">2.1.均值——方差模型与直方图</h2><p>这部分略了，可以参考代码。</p><h2 id="采样定理">2.2.采样定理</h2><p><strong>The sampling theorem indicates that a continuous signal canbe properly sampled, only if it does not contain frequency componentsabove one-half of the sampling rate.</strong></p><p>当连续信号不包含高于采样率的<span class="math inline">\(\frac{1}{2}\)</span>频率分量时，才能正确采样，采样后的信号才完整保留了原始信号的信息。</p><p><img src="cydl1.png"></p><p>用python绘图，当采样率是频率的20倍时，sin散点数据在一个采样率远大于信号频率的正弦波中如下图所示：<img src="cydl2.png"></p><p>当采样率分别是频率的10倍和20倍时 ： <img src="cydl3.png"> <img src="cydl4.png"></p><p>当采样率分别是频率的2倍时（奈奎斯特速率）： <img src="cydl5.png">在正弦波的无数个周期内，都取相同位置的点，故无法正确获得采样（采样信号频率发生混叠，这里可以从频谱图更好的理解，以后会记录到，可以参考有关fft的代码）</p><p>（复刻书上的图：0.95采样率=频率） <img src="cydl6.png">每个周期只有1或2个点，虽然点呈正弦波的形状，但采样出的信号频率比原来的低。</p><p>参考代码：https://github.com/SkylarShadow/dsp_guide_for_csbeginner</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
    <tags>
      
      <tag>dsp</tag>
      
      <tag>数字信号处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实用数字信号处理——笔记与基于C++与python的实验(1)</title>
    <link href="/2023/07/20/dsp-guide1/"/>
    <url>/2023/07/20/dsp-guide1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考书：《实用数字信号处理：从原理到应用》 Steven W. Smith本笔记的内容倾向于计算机专业，电路相关的内容会较少而程序方面的会比较多；<br>本文是笔记而不是相对准确的教程，所以仅供参考；</p><h2 id="正弦波数据的生成">1.1.正弦波数据的生成</h2><p>正弦波的公式:<br><!-- $ y=A \sin ( \omega _\Delta t + \psi )=Asin( 2 \pi f _\Delta t + \psi ) $ --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>A</mi><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>ω</mi><mi mathvariant="normal">Δ</mi></msub><mi>t</mi><mo>+</mo><mi>ψ</mi><mo stretchy="false">)</mo><mo>=</mo><mi>A</mi><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><msub><mi>f</mi><mi mathvariant="normal">Δ</mi></msub><mi>t</mi><mo>+</mo><mi>ψ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=A \sin ( \omega _\Delta t + \psi )=Asin( 2 \pi f _\Delta t + \psi )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">Δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">Δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ψ</span><span class="mclose">)</span></span></span></span></p><p>假如用一个数组存储正弦波数据，数组的大小为总采样点数:sample_num(单位：个采样点数),设时间为time(单位：秒),采样率为sample_rate(单位：采样点数/秒),则<span class="math inline">\(sample\_num = sample\_rate \timestime\)</span>； 要算时间间隔，将sample_num设为1，则时间间隔 <span class="math inline">\(t =1/sample\_rate\)</span>,还要将相位角从角度制转为弧度制；</p><p>C++关键代码如下：</p><pre><code class="hljs">double delta_t = 1.0 / sample_rate;for (int i = 0; i &lt; sample_num;i++)&#123;    double t = i * delta_t;    sin_arr[i] = amp * sin(2 * M_PI * freq *t + phase*M_PI/180);&#125;</code></pre><p>用python进行绘图： <img src="csin.png"><!-- ![](csin.png) --> 参考代码：https://github.com/SkylarShadow/dsp_guide_for_csbeginner</p><h2 id="数字信号处理的软件部分">1.2 数字信号处理的软件部分</h2><p>1.整数 2.浮点数 3.执行程序速度（算法速度）(计算机专业的知识略过......)</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    
    <tags>
      
      <tag>dsp</tag>
      
      <tag>数字信号处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
